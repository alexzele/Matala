#pragma once

//queue.h

typedef int queue_type;

typedef struct queue_element
{
	queue_type data;
	struct queue_element *ptr_next;
}	queue_element;

typedef struct
{
	queue_element *front, *rear;
	int items_num;
}	queue;

void create_queue(queue *pq);

int enqueue(queue_type, queue *);

void dequeue(queue *, queue_type *);

int queue_front(queue *, queue_type *);

int queue_is_empty(queue *);

int queue_is_full(queue *);

int size_of_queue(queue *);
//STACK.h

#define MAX 100
#define MIN_INT 1<<31

typedef struct {
	int top;
	int items[MAX];
} stackT;

void createStack(stackT* stack);

void push(stackT* stack, int x);

int pop(stackT* stack);

int top(stackT* stack);

unsigned char stackIsEmpty(stackT* stack);

unsigned char stackIsFull(stackT* stack);

void PrintStack(stackT* stack);
//btree.h

typedef struct node {
	int data;
	struct node *left;
	struct node *right;
	struct node *father;
} node;

typedef struct {
	node *root;
} bstree;

void createBstree(bstree *tree);

void insert(bstree *tree, int data);

node *minNode(node *tmp);

node *sucessorNode(node *tmp);

void printTree(node *tmp);

node *findInTree(node *tmp, int data);

node *deleteInTree(bstree *tree, node *tmp);





